------------------------------------------------
CREATE TABLE USER_PROFILE(
    USER_PROFILE_ID number GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    LOGIN varchar(100) NOT NULL,
    AVATAR BLOB NOT NULL,
    EMAIL varchar(200) NOT NULL,
    PASSWORD varchar(100) NOT NULL,
    USER_ROLE varchar(100) NOT NULL,
    CONSTRAINT CONSTRAIN_USER_ROLE CHECK(USER_ROLE IN('ROLE_User','ROLE_Admin'))
)TABLESPACE CP_TS;
COMMIT;

select * from USER_PROFILE;
commit;
delete USER_PROFILE where user_profile_id=101;

DROP TABLE USER_PROFILE PURGE;
------------------------------------------------
CREATE TABLE USERS_REVIEWS_ON_MOVIE(
    USERS_REVIEWS_ON_MOVIE_ID INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    USER_REVIEW_TEXT CLOB NOT NULL,
    DATE_OF_REVIEW DATE NOT NULL,
    USER_PROFILE_ID NUMBER NOT NULL,
    ALL_INFORMATION_ABOUT_FILM_ID NUMBER NOT NULL,
    CONSTRAINT USER_PROFILE_ID_CONSTRAINT FOREIGN KEY (USER_PROFILE_ID) REFERENCES USER_PROFILE(USER_PROFILE_ID),
    CONSTRAINT ALL_INFORMATION_ABOUT_FILM_ID_CONSTRAINT FOREIGN KEY (ALL_INFORMATION_ABOUT_FILM_ID) REFERENCES ALL_INFORMATION_ABOUT_FILM(ALL_INFORMATION_ABOUT_FILM_ID) ON DELETE CASCADE
)TABLESPACE CP_TS;          

DROP TABLE USERS_REVIEWS_ON_MOVIE PURGE;
------------------------------------------------
CREATE TABLE VISITS_TABLE(
    VISITS_TABLE_ID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    DATE_OF_VISITS DATE NOT NULL,
    VISITS_NUMBER NUMBER NOT NULL
)TABLESPACE CP_TS;

select * from VISITS_TABLE;

CREATE OR REPLACE TRIGGER TR_VISITS_TABLE
BEFORE INSERT ON VISITS_TABLE
FOR EACH ROW
DECLARE
    visits_count NUMBER;
    PREV_VALUE NUMBER;
    PREV_ID NUMBER;
BEGIN
    SELECT COUNT(*) INTO visits_count
    FROM VISITS_TABLE
    WHERE DATE_OF_VISITS = :new.DATE_OF_VISITS;

    IF visits_count > 0 THEN
        dbms_output.put_line('allgood');
        SELECT VISITS_TABLE.VISITS_NUMBER,VISITS_TABLE.VISITS_TABLE_ID INTO PREV_VALUE,PREV_ID FROM VISITS_TABLE
            WHERE DATE_OF_VISITS = :new.DATE_OF_VISITS;
        PREV_VALUE:= PREV_VALUE+1;
        DELETE VISITS_TABLE WHERE VISITS_TABLE_ID = PREV_ID;
        :new.VISITS_TABLE_ID := PREV_ID;
        :new.VISITS_NUMBER := PREV_VALUE;
    END IF;
END;
/

DROP TRIGGER TR_VISITS_TABLE;
SELECT trigger_name, trigger_type, triggering_event
    FROM all_triggers
        WHERE table_name = 'VISITS_TABLE';

DROP TABLE VISITS_TABLE PURGE;
------------------------------------------------
CREATE TABLE ALL_INFORMATION_ABOUT_FILM(
    ALL_INFORMATION_ABOUT_FILM_ID NUMBER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    TITLE VARCHAR(100) NOT NULL,
    ORIGINAL_TITLE VARCHAR(100) NOT NULL,
    POSTER BLOB NOT NULL,
    YEAR_OF_POSTING VARCHAR(20) NOT NULL,
    COUNTRY VARCHAR(50) NOT NULL,
    DESCRIPTION VARCHAR(1000) NOT NULL,
    RATING_IMDb FLOAT NOT NULL,
    RATING_KP FLOAT NOT NULL,
    BOX_OFFICE_RECEIPTS FLOAT NOT NULL,
    BUDGET FLOAT NOT NULL,
    AGE NUMBER NOT NULL,
    VIEWING_TIME VARCHAR(30) NOT NULL,
    GENRES GENRE_TYPE_INSTANCE,
    DIRECTORS DIRECTOR_TYPE_INSTANCE,
    ACTORS ACTOR_TYPE_INSTANCE,
    INTERESTING_FACT INTERESTING_FACT_TYPE_INSTANCE
    )NESTED TABLE GENRES STORE AS GENRES_NT
     NESTED TABLE DIRECTORS STORE AS DIRECTORS_NT
     NESTED TABLE ACTORS STORE AS ACTORS_NT
     NESTED TABLE INTERESTING_FACT STORE AS INTERESTING_FACT_NT (TABLESPACE CP_TS);
    --
INSERT INTO ALL_INFORMATION_ABOUT_FILM VALUES(DEFAULT,'1','1','1','01/11/2023','1','1',2.0,2.4,2222,22,12,'2',
    GENRE_TYPE_INSTANCE(GENRE_TYPE_CONSTRUCTOR('BOEVIK'),GENRE_TYPE_CONSTRUCTOR('SSSS')),
    DIRECTOR_TYPE_INSTANCE(DIRECTOR_TYPE_CONSTRUCTOR('dfs'),DIRECTOR_TYPE_CONSTRUCTOR('asd')),
    ACTOR_TYPE_INSTANCE(ACTOR_TYPE_CONSTRUCTOR('zxc'),ACTOR_TYPE_CONSTRUCTOR('cxz')),
    INTERESTING_FACT_TYPE_INSTANCE(INTERESTING_FACT_TYPE_CONSTRUCTOR('XXXXXCCC'),INTERESTING_FACT_TYPE_CONSTRUCTOR('SSSSS'),INTERESTING_FACT_TYPE_CONSTRUCTOR('1111112'))
);
    
DROP TABLE ALL_INFORMATION_ABOUT_FILM PURGE;
------------------------------------------------
CREATE TABLE USER_WATCH_LATER(
    USER_WATCH_LATER_ID NUMBER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    ALL_INFORMATION_ABOUT_FILM NUMBER NOT NULL,
    USER_PROFILE_ID NUMBER NOT NULL,
    CONSTRAINT ALL_INFORMATION_ABOUT_FILM_USER_WATCH_LATER_CONSTRAINT FOREIGN KEY (ALL_INFORMATION_ABOUT_FILM) REFERENCES ALL_INFORMATION_ABOUT_FILM(ALL_INFORMATION_ABOUT_FILM_ID) ON DELETE CASCADE,
    CONSTRAINT USER_PROFILE_ID_USER_WATCH_LATER_CONSTRAINT FOREIGN KEY(USER_PROFILE_ID)REFERENCES USER_PROFILE(USER_PROFILE_ID)
)TABLESPACE CP_TS;

DROP TABLE USER_WATCH_LATER PURGE;
------------------------------------------------
CREATE TABLE USER_LIKE(
    USER_LIKE_ID NUMBER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    ALL_INFORMATION_ABOUT_FILM NUMBER NOT NULL,
    USER_PROFILE_ID NUMBER NOT NULL,
    CONSTRAINT ALL_INFORMATION_ABOUT_FILM_USER_LIKE_CONSTRAINT FOREIGN KEY (ALL_INFORMATION_ABOUT_FILM) REFERENCES ALL_INFORMATION_ABOUT_FILM(ALL_INFORMATION_ABOUT_FILM_ID) ON DELETE CASCADE,
    CONSTRAINT USER_PROFILE_ID_USER_LIKE_CONSTRAINT FOREIGN KEY(USER_PROFILE_ID)REFERENCES USER_PROFILE(USER_PROFILE_ID)
)TABLESPACE CP_TS;
COMMIT;
SELECT *FROM USER_LIKE;
SELECT *FROM USER_WATCH_LATER;
DROP TABLE USER_LIKE PURGE;
SELECT * FROM V$VERSION;
------------------------------------------------




CREATE OR REPLACE PACKAGE ADMINPROFILEFUNCTIONS AS
    PROCEDURE ADD_USER(
        LOGIN IN USER_PROFILE.LOGIN%TYPE,
        AVATAR IN USER_PROFILE.AVATAR%TYPE,
        EMAIL IN USER_PROFILE.EMAIL%TYPE,
        PASSWORD IN USER_PROFILE.PASSWORD%TYPE,
        USER_ROLE IN USER_PROFILE.USER_ROLE%TYPE
    );
    
    PROCEDURE ADD_USER_GET_ID(
        LOGIN IN USER_PROFILE.LOGIN%TYPE,
        AVATAR IN USER_PROFILE.AVATAR%TYPE,
        EMAIL IN USER_PROFILE.EMAIL%TYPE,
        PASSWORD IN USER_PROFILE.PASSWORD%TYPE,
        USER_ROLE IN USER_PROFILE.USER_ROLE%TYPE,
        USER_ID OUT NUMBER
    );
    
    FUNCTION FIND_BY_EMAIL(
        UEMAIL varchar
    ) RETURN SYS_REFCURSOR;
    
    FUNCTION FIND_BY_ID(
        USER_ID IN USER_PROFILE.user_profile_id%TYPE
    ) RETURN SYS_REFCURSOR;
    
    FUNCTION FIND_BY_EMAIL_AND_PASSWORD(
        UEMAIL USER_PROFILE.EMAIL%TYPE,
        UPASSWORD USER_PROFILE.PASSWORD%TYPE
    ) RETURN SYS_REFCURSOR;
    
    PROCEDURE DELETE_USER_BY_ID(
        USER_ID IN USER_PROFILE.USER_PROFILE_ID%TYPE
    );
    
    PROCEDURE UPDATE_USER(
        USER_ID IN USER_PROFILE.USER_PROFILE_ID%TYPE,
        LOGIN IN USER_PROFILE.LOGIN%TYPE,
        AVATAR IN USER_PROFILE.AVATAR%TYPE,
        EMAIL IN USER_PROFILE.EMAIL%TYPE,
        PASSWORD IN USER_PROFILE.PASSWORD%TYPE,
        USER_ROLE IN USER_PROFILE.USER_ROLE%TYPE
    );
    
END ADMINPROFILEFUNCTIONS;
/

CREATE OR REPLACE PACKAGE BODY ADMINPROFILEFUNCTIONS AS
    PROCEDURE ADD_USER(
        LOGIN IN USER_PROFILE.LOGIN%TYPE,
        AVATAR IN USER_PROFILE.AVATAR%TYPE,
        EMAIL IN USER_PROFILE.EMAIL%TYPE,
        PASSWORD IN USER_PROFILE.PASSWORD%TYPE,
        USER_ROLE IN USER_PROFILE.USER_ROLE%TYPE
    ) IS
        UNIQUE_EMAIL NUMBER:=0;
        UNIQUE_LOGIN NUMBER:=0;
    BEGIN
        SELECT COUNT(*) INTO UNIQUE_EMAIL FROM USER_PROFILE WHERE USER_PROFILE.email=ADD_USER.EMAIL;
        IF UNIQUE_EMAIL = 0 
            THEN
                SELECT COUNT(*) INTO UNIQUE_LOGIN FROM USER_PROFILE WHERE USER_PROFILE.LOGIN=ADD_USER.LOGIN;
                IF UNIQUE_LOGIN = 0
                    THEN
                        INSERT INTO USER_PROFILE VALUES(DEFAULT, LOGIN, AVATAR, EMAIL, PASSWORD, USER_ROLE);
                        COMMIT;
                ELSE
                    RAISE_APPLICATION_ERROR(-20003,'LOGIN ALREDY USED');
                END IF;
            ELSE
                RAISE_APPLICATION_ERROR(-20000,'EMAIL ALREDY USED');
        END IF;
    END ADD_USER;
    PROCEDURE ADD_USER_GET_ID(
        LOGIN IN USER_PROFILE.LOGIN%TYPE,
        AVATAR IN USER_PROFILE.AVATAR%TYPE,
        EMAIL IN USER_PROFILE.EMAIL%TYPE,
        PASSWORD IN USER_PROFILE.PASSWORD%TYPE,
        USER_ROLE IN USER_PROFILE.USER_ROLE%TYPE,
        USER_ID OUT NUMBER
    )IS
        UNIQUE_EMAIL NUMBER:=0;
        UNIQUE_LOGIN NUMBER:=0;
    BEGIN
        SELECT COUNT(*) INTO UNIQUE_EMAIL FROM USER_PROFILE WHERE USER_PROFILE.EMAIL=ADD_USER_GET_ID.EMAIL;
        IF UNIQUE_EMAIL = 0 
            THEN
                SELECT COUNT(*) INTO UNIQUE_LOGIN FROM USER_PROFILE WHERE USER_PROFILE.LOGIN=ADD_USER_GET_ID.LOGIN;
                IF UNIQUE_LOGIN = 0
                    THEN
                        INSERT INTO USER_PROFILE VALUES(DEFAULT, LOGIN, AVATAR, EMAIL, PASSWORD, USER_ROLE);
                        SELECT MAX(user_profile_id) INTO USER_ID FROM USER_PROFILE;
                        COMMIT;
                ELSE
                    RAISE_APPLICATION_ERROR(-20003,'LOGIN ALREDY USED');
                END IF;
            ELSE
                RAISE_APPLICATION_ERROR(-20000,'EMAIL ALREDY USED');
        END IF;
    END ADD_USER_GET_ID;
    
    PROCEDURE DELETE_USER_BY_ID(
        USER_ID IN USER_PROFILE.USER_PROFILE_ID%TYPE
    )
    IS
    BEGIN
        DELETE FROM USER_PROFILE WHERE USER_PROFILE.USER_PROFILE_ID= USER_ID;
        COMMIT;
    END DELETE_USER_BY_ID;
    
    PROCEDURE UPDATE_USER(
    USER_ID IN USER_PROFILE.USER_PROFILE_ID%TYPE,
    LOGIN IN USER_PROFILE.LOGIN%TYPE,
    AVATAR IN USER_PROFILE.AVATAR%TYPE,
    EMAIL IN USER_PROFILE.EMAIL%TYPE,
    PASSWORD IN USER_PROFILE.PASSWORD%TYPE,
    USER_ROLE IN USER_PROFILE.USER_ROLE%TYPE
)
IS
BEGIN
    UPDATE USER_PROFILE
    SET
        USER_PROFILE.LOGIN = UPDATE_USER.LOGIN,
        USER_PROFILE.AVATAR = UPDATE_USER.AVATAR,
        USER_PROFILE.EMAIL = UPDATE_USER.EMAIL,
        USER_PROFILE.PASSWORD = UPDATE_USER.PASSWORD,
        USER_PROFILE.USER_ROLE = UPDATE_USER.USER_ROLE
    WHERE USER_PROFILE.USER_PROFILE_ID = UPDATE_USER.USER_ID;
    COMMIT;
END UPDATE_USER;
    
    FUNCTION FIND_BY_EMAIL(
        UEMAIL varchar
    ) RETURN SYS_REFCURSOR
    IS
        V_USER_CURSOR SYS_REFCURSOR;
        FIND NUMBER:=0;
    BEGIN
        SELECT COUNT(*) INTO FIND FROM USER_PROFILE WHERE USER_PROFILE.EMAIL = UEMAIL;
        IF FIND=1 THEN
            OPEN V_USER_CURSOR FOR
                SELECT *
                    FROM USER_PROFILE
                        WHERE USER_PROFILE.EMAIL = UEMAIL;
            RETURN V_USER_CURSOR;
        ELSE
            RAISE_APPLICATION_ERROR(-20002,'USER DO NOT FIND,CHECK CREDENTIALS');
        END IF;
    END FIND_BY_EMAIL;
    
     FUNCTION FIND_BY_ID(
         USER_ID IN USER_PROFILE.user_profile_id%TYPE
    ) RETURN SYS_REFCURSOR
    IS
        V_USER_CURSOR SYS_REFCURSOR;
    BEGIN
        OPEN V_USER_CURSOR FOR
            SELECT *
                FROM USER_PROFILE
                    WHERE user_profile.user_profile_id = USER_ID;
        RETURN V_USER_CURSOR;
    END FIND_BY_ID;
    
    FUNCTION FIND_BY_EMAIL_AND_PASSWORD(
        UEMAIL USER_PROFILE.EMAIL%TYPE,
        UPASSWORD USER_PROFILE.PASSWORD%TYPE
    ) RETURN SYS_REFCURSOR
    IS
        V_USER_CURSOR SYS_REFCURSOR;
    BEGIN
        OPEN V_USER_CURSOR FOR
            SELECT *
                FROM USER_PROFILE
                    WHERE   USER_PROFILE.EMAIL='UEMAIL' 
                        AND
                            USER_PROFILE.PASSWORD='UPASSWORD';
        BEGIN
            IF V_USER_CURSOR%NOTFOUND THEN
                CLOSE V_USER_CURSOR;
                RAISE_APPLICATION_ERROR(-20001, 'No user found with the provided email');
            END IF;
        END;
        RETURN V_USER_CURSOR;
    END FIND_BY_EMAIL_AND_PASSWORD;
    
END ADMINPROFILEFUNCTIONS;
/
--SELECT * FROM USER_PROFILE;



